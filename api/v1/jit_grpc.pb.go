// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: api/v1/jit.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Jit_Calculate_FullMethodName = "/v1.Jit/Calculate"
)

// JitClient is the client API for Jit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JitClient interface {
	Calculate(ctx context.Context, opts ...grpc.CallOption) (Jit_CalculateClient, error)
}

type jitClient struct {
	cc grpc.ClientConnInterface
}

func NewJitClient(cc grpc.ClientConnInterface) JitClient {
	return &jitClient{cc}
}

func (c *jitClient) Calculate(ctx context.Context, opts ...grpc.CallOption) (Jit_CalculateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Jit_ServiceDesc.Streams[0], Jit_Calculate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &jitCalculateClient{stream}
	return x, nil
}

type Jit_CalculateClient interface {
	Send(*CalculationRequest) error
	Recv() (*CalculationResponse, error)
	grpc.ClientStream
}

type jitCalculateClient struct {
	grpc.ClientStream
}

func (x *jitCalculateClient) Send(m *CalculationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jitCalculateClient) Recv() (*CalculationResponse, error) {
	m := new(CalculationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JitServer is the server API for Jit service.
// All implementations must embed UnimplementedJitServer
// for forward compatibility
type JitServer interface {
	Calculate(Jit_CalculateServer) error
	mustEmbedUnimplementedJitServer()
}

// UnimplementedJitServer must be embedded to have forward compatible implementations.
type UnimplementedJitServer struct {
}

func (UnimplementedJitServer) Calculate(Jit_CalculateServer) error {
	return status.Errorf(codes.Unimplemented, "method Calculate not implemented")
}
func (UnimplementedJitServer) mustEmbedUnimplementedJitServer() {}

// UnsafeJitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JitServer will
// result in compilation errors.
type UnsafeJitServer interface {
	mustEmbedUnimplementedJitServer()
}

func RegisterJitServer(s grpc.ServiceRegistrar, srv JitServer) {
	s.RegisterService(&Jit_ServiceDesc, srv)
}

func _Jit_Calculate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JitServer).Calculate(&jitCalculateServer{stream})
}

type Jit_CalculateServer interface {
	Send(*CalculationResponse) error
	Recv() (*CalculationRequest, error)
	grpc.ServerStream
}

type jitCalculateServer struct {
	grpc.ServerStream
}

func (x *jitCalculateServer) Send(m *CalculationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jitCalculateServer) Recv() (*CalculationRequest, error) {
	m := new(CalculationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Jit_ServiceDesc is the grpc.ServiceDesc for Jit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Jit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Jit",
	HandlerType: (*JitServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Calculate",
			Handler:       _Jit_Calculate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1/jit.proto",
}
